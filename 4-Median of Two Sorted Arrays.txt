//两个经过排序的数组，长度分别为m,n
//在log(m+n)时间复杂度前提下，找出两数组中位数

int m=nums1.length;
int n=nums2.length;

int left=(m+n+1)/2;
int right=(m+n+2)/2;

return (helper(nums1,0,nums2,0,left)+helper(nums1,0,nums2,0,right))/2.0;

private double helper(int[] nums1,int i,int[] nums2,int j,int k) {
    if(i>=nums1.length) return nums2[j+k-1];
    if(j>=nums2.length) return nums1[i+k-1];

    if(k==1) return Math.min(nums1[i],nums2[j]);
    int midVal1=((i+k/2-1)<nums1.length)?nums1[i+k/2-1]:Integer.MAX_VALUE;
    int midVal2=((j+k/2-1)<nums2.length)?nums2[j+k/2-1]:Integer.MAX_VALUE;

    if(midVal1<midVal2) return helper(nums1,i+k/2,nums2,j,k-k/2);
    else return helper(nums1,i,nums2,j+k/2,k-k/2);
}